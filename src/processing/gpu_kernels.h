#pragma once

namespace kiv_ppr::kernels
{
    static constexpr const char const* First_Iteration = 
        "#pragma OPENCL EXTENSION cl_khr_fp64 : enable"
        "#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable"
        ""
        "// https://opensource.apple.com/source/Libm/Libm-315/Source/ARM/fpclassify.c.auto.html"
        "int fpclassify(double x)"
        "{"
        "    ulong u = *(ulong*)&x;"
        "    uint exp = (uint)((u & 0x7fffffffffffffffUL) >> 52);"
        ""
        "    if (0 == exp)"
        "    {"
        "        if (u & 0x000fffffffffffffUL)"
        "        {"
        "            return 0;"
        "        }"
        "        return 1;"
        "    }"
        "    if (0x7ff == exp)"
        "    {"
        "        if (u & 0x000fffffffffffffUL)"
        "        {"
        "            return 2;"
        "        }"
        "        return 3;"
        "    }"
        "    return 4;"
        "}"
        ""
        "int Is_Valid_Double(double x)"
        "{"
        "    int validation_result = fpclassify(x);"
        "    return 4 == validation_result || 1 == validation_result;"
        "}"
        ""
        "__kernel void First_File_Iteration(__global double* data,"
        "                                   __local double* local_mean,"
        "                                   __global double* out_mean,"
        "                                   __local double* local_min,"
        "                                   __global double* out_min,"
        "                                   __local double* local_max,"
        "                                   __global double* out_max,"
        "                                   __global ulong* out_count,"
        "                                   __global ulong* out_all_ints)"
        "{"
        "    size_t global_id = get_global_id(0);"
        "    size_t local_id = get_local_id(0);"
        "    size_t local_size = get_local_size(0);"
        "    size_t group_id = get_group_id(0);"
        ""
        "    local_mean[local_id] = data[global_id] / 2.0;"
        "    local_min[local_id] = local_mean[local_id];"
        "    local_max[local_id] = local_mean[local_id];"
        ""
        "    barrier(CLK_LOCAL_MEM_FENCE);"
        ""
        "    if (Is_Valid_Double(data[global_id]))"
        "    {"
        "        atom_inc(&out_count[0]);"
        ""
        "        if (ceil(data[global_id]) != floor(data[global_id]))"
        "        {"
        "            atom_inc(&out_all_ints[0]);"
        "        }"
        "    }"
        ""
        "    int valid_1;"
        "    int valid_2;"
        ""
        "    for (size_t i = local_size / 2; i > 0; i /= 2)"
        "    {"
        "        if (local_id < i)"
        "        {"
        "            valid_1 = Is_Valid_Double(local_mean[local_id]);"
        "            valid_2 = Is_Valid_Double(local_mean[local_id + i]);"
        ""
        "            if (!valid_1 && valid_2)"
        "            {"
        "                local_mean[local_id] = local_mean[local_id + i];"
        "                local_min[local_id] = local_min[local_id + i];"
        "                local_max[local_id] = local_max[local_id + i];"
        "                valid_1 = 1;"
        "            }"
        "            if (valid_1 && valid_2)"
        "            {"
        "                local_mean[local_id] = (local_mean[local_id] / 2.0) + (local_mean[local_id + i] / 2.0);"
        "                local_min[local_id] = min(local_min[local_id], local_min[local_id + i]);"
        "                local_max[local_id] = max(local_max[local_id], local_max[local_id + i]);"
        "            }"
        "        }"
        ""
        "        barrier(CLK_LOCAL_MEM_FENCE);"
        "    }"
        ""
        "    if (0 == local_id)"
        "    {"
        "        out_mean[group_id] = local_mean[0];"
        "        out_min[group_id] = local_min[0];"
        "        out_max[group_id] = local_max[0];"
        "    }"
        "}";
}